---
layout: post
title:  "알고리즘의 기초"
date:   2018-03-27 15:18:00 +0900
categories: jekyll update
---
# 알고리즘의 특성

문제 풀이과정을 미리 만들어 놓은것이 알고리즘이다.

## 프로그램 개발 단계

1. 정의 및 분석 단계
    문제를 정확히 이해하고 구체적으로 정의한다.
2. 입출력 설계 단계
    입력과 출력으로 사용될 변수들의 종류와 타입을 결정하고 설계한다.
3. 알고리즘 설계 단계
    정의된 문제로부터 해답을 얻기 위한 과정을 정확하게 설계한다.
4. 코딩 단계
    하나의 프로그래밍 언어를 선택하여 구현한다.
5. 테스트 단계
    다양한 경우를 대상으로 프로그램의 정확성, 효율성 등을 검사 한다.

## 알고리즘의 조건
1. 입력
2. 출력
  생성 결과물이 존재한다.
3. 명확성
  각 명령어는 모호하지 않고 분명해야 한다.
4. 유효성
  종이와 연필만 가지고도 시뮬레이션이 가능하여야 한다.
5. 유한성
  한번 시작하면 반드시 종료하여야 한다. 종료하더라도 실행시간의 유한성을 가져야 한다.
6. 정확성
  하나의 예외도 없이 모든 입력에 대해 항상 정확한 해답을 알려주어야 한다.

## 알고리즘의 표현
  * 일상언어
    모호한 표현으로 인해 의사소통에 어려움을 가져올 수 있으며 간결성에서 다른 표현 방법에 비해 큰 단점을 갖는다.

  * 의사 코드
    컴퓨터에서 실행이 가능한 코드는 아니지만 이와 유사한 모습을 지니는 코드를 일컫는다. 정형적인 문장과 제어 구조를 표현하면서 상세한 구현 레벨까지 신경을 쓰지 않아도 된다.

  * 흐름도
    알고리즘의 구조와 복잡성을 시각적으로 확인할 수 있지만 복잡한 알고리즘의 경우 상당한 공간이 필요하기 때문에 여러 페이지에 걸쳐 나타내어야 하는 문제도 있고 계층적 블록 구조나 중첩된 제어 구조를 표현하는데 한계가 있다.
  * 프로그래밍 언어
    상세한 구현 레벨까지 신경을 쓰다보면 핵심적인 알고리즘 구조에 집중하기 어려운 단점이 있다.
# 유클리드의 알고리즘 : 최대 공약수 구하기
현재 까지 알려진 가장 오래된 알고리즘
```
int gcd(int m, int n){
  if(n == 0) return m;
  return gcd(n, m % n);
}
```
# 알고리즘의 성능 평가
알고리즘은 시간과 공간으로 성능을 평가 받는다. 다만 하드웨어 기술의 발전으로 메모리 사용량보다는 실행시간이 더 중요하게 다루어지므로 일반적으로 실행 시간을 효율성의 첫 번째 기준으로 삼는다.
