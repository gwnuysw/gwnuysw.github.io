---
layout: post
title:  "네트워크 서비스"
date:   2018-03-18 19:20:00 +0900
categories: jekyll update
---
### 네트워크층 서비스

1. 패킷화
  * 네트워크층의 첫번째 의무는 근원지로부터 목적지까지 변경이나 활용 없이 페이로드를 운반 하는 것이다. 마치 우체국과 같은 운반 서비스를 수행한다. 또한 *수신자, 발신자 IP주소는 바뀌지 않는다.*

2. 라우팅과 포워딩
  * **라우팅** 은 출발지에서 목적지까지의 경로를 설정하는 것을 말하고 **포워딩** 은 라우터의 입력포트에서 출력포트로 패킷을 이동 시키는 것을 말한다.

3. 다른 서비스
  * 오류검출은 하지만 _오류정정은 하지 않는다._
  * 흐름제어는 전송계층, 데이터 링크 계층에서만 한다.
  * 혼잡제어는 네트워크 층에 없다.

### 패킷 스위칭

1. 데이터 그램 방식
  * 실제 인터넷에서 사용하는 방식이다.
  * 목적지 주소만 참조하여 경로를 설정한다.
  * 패킷의 순서가 바뀔 수 있으며, 전송층에서 순서를 맞춘다.
2. 가상 회선 방식
  * Connection oriented, 물리적인 연결이 아니다.
  * 패킷의 순서가 유지된다.
  * 목적지 주소가 아니라 _레이블(가상 회선 식별자)_ 을 참조하여 라우팅을 한다.

*레이블설정을 위한 단계*

1. _요청패킷_ 을 보내며 라우팅 테이블에 incoming 항을 채운다.
2. _확인 응답 패킷_ 을 보내며 out going 항을 채운다.
3. 데이터를 전송한다.
4. 연결을 해제한다.

### 네트워크층의 성능

1. 지연

  * 전송 지연(transmission delay)

    선로상에 패킷은 비트를 하나씩 차례로 보낸다. 만약 첫 비트가 시간 t1상에 있고, 마지막 비트가 시간 t2상에 있다면 패킷의 전송 지연은 (t2-t1이 된다.

      `trDelay = (Packet length) / (transmission rate)`

  * 전파지연(Propagation delay)

      전파 지연은 전송 매체를 통해 A지점에서 B지점까지 1비트가 전달되는 데 걸리는 시간이다. 패킷 교환 네트워크의 전파 지연은 각 네트워크(LAN이나 WAN)의 전파 지연에 따라 결정 된다. **가장짧은 시간을 잡아 먹는다**

      `pgDelay = (Distance) / (Propagation speed)`

  * 처리지연(Processing delay)

    라우터나 목적지 호스트가 입력 포트로 패킷을 받고, 여러 계산을 거친뒤 상위 계층의 프로토콜로 패킷을 전달하는데 걸리는 시간을 말한다.

  * 큐잉 지연

    라우터의 입력큐와 출력큐에서 대기하는 시간 **가장 많은 시간을 잡아 먹는다.**

  *전체 지연*

  전체 경로상의 라우터의 개수 n을 알고, 송신자, 라우터, 수신측이 각각 같은 지연을 가지고 있다고 가정할 때 전체지연은 다음과 같다.

  `Total delay = (n+1)(trDelay + pgDelay + prDelay) + n(quDelay)`

2. 처리량

  처리량은 초당 한 지점을 지나는 비트 수다.  **전송률과는 다르다.**

3. 패킷 손실

  라우터는 한정된 버퍼를 가지고 있다. 버퍼가 가득 찰 경우 패킷을 수신하지 못하고 폐기한다. 패킷이 손실 됬을때를 알기위해 재전송 타이머를 설정 한다.

4. 혼잡 제어

  지연은 패킷양이 많아질수록 지수 급격하게 증가한다. 그러나 처리량은 최대 처리량을 넘어서면 처리량이 급격하게 낮아진다.

  * 개 루프 혼잡 제어

    혼잡이 발생 하기 전 그것을 방지하기 위한 정책을 수행한다.

    * 재전송 정책
    * 윈도 정책
    * 확인응답 정책
    * 폐기 정책
    * 수락 정책

  * 폐 루프 혼잡 제어

    혼잡이 발생한 뒤 혼잡을 줄이기 위한 기술이다.

      * 역압
      * 초크패킷

### IPv4 주소

* 32비트 주소를 1바이트씩 온점으로 끊어서 표기한다.
* 네트워크를 정의 하는 prefix와 노드를 정의 하는 suffix로 나뉜다.


1. 클래스 기반의 주소지정

  주소 고갈 문제가 있다.

  * A클래스는 8비트 prefix 0으로 시작
  * B클래스는 16비트 prefix 10으로 시작
  * C클래스는 24비트 prefix 110으로 시작
  * D클래스는 접두사와 접미사 구분이 없다. 1110으로 시작
  * E클래스는 두미 구분이 없으며 1111으로 시작

  * 수퍼네팅과 서브네팅

    _서브네팅_ 에서 클래스 A나 클래스 B는 여러 개의 서브넷으로 분리된다. 각 서브넷은 원래 네트워크보다 더 큰 크기의 접두사를 가진다.

    _수퍼네팅_ 은 여러 클래스 C를 하나의 큰 구조로 묶어 클래스 C블록에서 유효한 256개보다 더많은 주소를 사용하려는 기관들을 위해 고안 되었다.

2. 클래스없는 주소 지정

  prefix가 가변적이다. 0에서 32 사이의 접두사 길이를 지정할 수 있다.

  * 슬래시 표기법

    `byte.byte.byte.byte/n`

    슬래시 표기법을 통해 블록의 주소 개수, 블록의 첫번째 주소, 마지막 주소를 알 수있다.
